{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dima and Nadeya\\\\js-pro-course\\\\lesson14\\\\src\\\\components\\\\componentslesson10\\\\PostList\\\\PostList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, memo } from 'react';\nimport { Post } from '../Post';\nimport styled from 'styled-components';\nimport { Modal } from '../index';\nimport { User } from './User';\nimport { useDispatch, useSelector } from 'react-redux'; // import { postsSaga } from '../../redux/sagas';\n\nimport { ACTIONS } from '../../redux/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PostList = /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n\n  // const [posts, setPosts] = useState([]);\n  const dispatch = useDispatch();\n  const [isModalOpened, setIsModalOpened] = useState(false);\n  const [user, setUser] = useState();\n  const posts = useSelector(state => state.postListReducer.posts);\n  console.log({\n    posts\n  });\n  const error = useSelector(state => state.postListReducer.error);\n\n  const onClickPost = user => {\n    setUser(user);\n    setIsModalOpened(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpened(false);\n  };\n\n  useEffect(async () => {\n    dispatch({\n      type: ACTIONS.GET_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isModalOpened && posts ? /*#__PURE__*/_jsxDEV(Modal, {\n      closeModal: closeModal,\n      children: /*#__PURE__*/_jsxDEV(User, {\n        name: user.name,\n        username: user.username,\n        email: user.email,\n        phone: user.phone,\n        website: user.website\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this) : null, /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: posts && posts.map((item, index) => /*#__PURE__*/_jsxDEV(Post, {\n          // username={item.user.username}\n          title: item.title,\n          body: item.body,\n          onClick: onClickPost,\n          user: item.user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 8\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}, \"lOT3gT0lWT6ICcjr1IQR1rS1R2Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n}));\n_c2 = PostList;\nconst Container = styled.div`\n\tjustify-content: center;\n\tbackground-color: #bababa;\n\tfont-size: 45px;\n\ttext-align: center;\n\tjustify-content: center;\n\tdisplay: grid;\n\tgrid-template-rows: 1fr 1fr 1fr;\n\tgrid-template-columns: 1fr 1fr 1fr;\n\tgrid-gap: 2vw;\n\tpadding: 0.5em;\n\tcolor: rgb(26, 23, 26);\n`;\n_c3 = Container;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PostList$memo\");\n$RefreshReg$(_c2, \"PostList\");\n$RefreshReg$(_c3, \"Container\");","map":{"version":3,"sources":["C:/Users/Dima and Nadeya/js-pro-course/lesson14/src/components/componentslesson10/PostList/PostList.jsx"],"names":["useEffect","useState","memo","Post","styled","Modal","User","useDispatch","useSelector","ACTIONS","PostList","dispatch","isModalOpened","setIsModalOpened","user","setUser","posts","state","postListReducer","console","log","error","onClickPost","closeModal","type","GET_POSTS_REQUEST","alert","name","username","email","phone","website","map","item","index","title","body","Container","div"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,IAA9B,QAA0C,OAA1C;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,SAASC,OAAT,QAAwB,uBAAxB;;;AAEA,OAAO,MAAMC,QAAQ,gBAAGR,IAAI,SAAC,MAAM;AAAA;;AAClC;AACA,QAAMS,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,EAAhC;AACA,QAAMe,KAAK,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,eAAN,CAAsBF,KAAlC,CAAzB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,IAAAA;AAAF,GAAZ;AAEA,QAAMK,KAAK,GAAGb,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,eAAN,CAAsBG,KAAlC,CAAzB;;AAEA,QAAMC,WAAW,GAAIR,IAAD,IAAU;AAC7BC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,GAHD;;AAKA,QAAMU,UAAU,GAAG,MAAM;AACxBV,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,GAFD;;AAGAb,EAAAA,SAAS,CAAC,YAAY;AACrBW,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAEf,OAAO,CAACgB;AAAhB,KAAD,CAAR;AACA,GAFQ,EAEN,EAFM,CAAT;AAGAzB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIqB,KAAJ,EAAW;AACVK,MAAAA,KAAK,CAACL,KAAD,CAAL;AACA;AACD,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAMA,sBACC;AAAA,eACET,aAAa,IAAII,KAAjB,gBACA,QAAC,KAAD;AAAO,MAAA,UAAU,EAAEO,UAAnB;AAAA,6BACC,QAAC,IAAD;AACC,QAAA,IAAI,EAAET,IAAI,CAACa,IADZ;AAEC,QAAA,QAAQ,EAAEb,IAAI,CAACc,QAFhB;AAGC,QAAA,KAAK,EAAEd,IAAI,CAACe,KAHb;AAIC,QAAA,KAAK,EAAEf,IAAI,CAACgB,KAJb;AAKC,QAAA,OAAO,EAAEhB,IAAI,CAACiB;AALf;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADA,GAUG,IAXL,eAYC,QAAC,SAAD;AAAA,6BACC;AAAA,kBACEf,KAAK,IACLA,KAAK,CAACgB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACT,QAAC,IAAD;AAEC;AACA,UAAA,KAAK,EAAED,IAAI,CAACE,KAHb;AAIC,UAAA,IAAI,EAAEF,IAAI,CAACG,IAJZ;AAKC,UAAA,OAAO,EAAEd,WALV;AAMC,UAAA,IAAI,EAAEW,IAAI,CAACnB;AANZ,WACMoB,KADN;AAAA;AAAA;AAAA;AAAA,gBADD;AAFF;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA,kBADD;AA8BA,CAzD2B;AAAA,UAEV3B,WAFU,EAKbC,WALa,EAQbA,WARa;AAAA,GAArB;MAAME,Q;AA2Db,MAAM2B,SAAS,GAAGjC,MAAM,CAACkC,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;MAAMD,S","sourcesContent":["import { useEffect, useState, memo } from 'react';\r\nimport { Post } from '../Post';\r\nimport styled from 'styled-components';\r\nimport { Modal } from '../index';\r\nimport { User } from './User';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import { postsSaga } from '../../redux/sagas';\r\nimport { ACTIONS } from '../../redux/constants';\r\n\r\nexport const PostList = memo(() => {\r\n\t// const [posts, setPosts] = useState([]);\r\n\tconst dispatch = useDispatch();\r\n\tconst [isModalOpened, setIsModalOpened] = useState(false);\r\n\tconst [user, setUser] = useState();\r\n\tconst posts = useSelector((state) => state.postListReducer.posts);\r\n\tconsole.log({ posts });\r\n\r\n\tconst error = useSelector((state) => state.postListReducer.error);\r\n\r\n\tconst onClickPost = (user) => {\r\n\t\tsetUser(user);\r\n\t\tsetIsModalOpened(true);\r\n\t};\r\n\r\n\tconst closeModal = () => {\r\n\t\tsetIsModalOpened(false);\r\n\t};\r\n\tuseEffect(async () => {\r\n\t\tdispatch({ type: ACTIONS.GET_POSTS_REQUEST });\r\n\t}, []);\r\n\tuseEffect(() => {\r\n\t\tif (error) {\r\n\t\t\talert(error);\r\n\t\t}\r\n\t}, [error]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{isModalOpened && posts ? (\r\n\t\t\t\t<Modal closeModal={closeModal}>\r\n\t\t\t\t\t<User\r\n\t\t\t\t\t\tname={user.name}\r\n\t\t\t\t\t\tusername={user.username}\r\n\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t\tphone={user.phone}\r\n\t\t\t\t\t\twebsite={user.website}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Modal>\r\n\t\t\t) : null}\r\n\t\t\t<Container>\r\n\t\t\t\t<ol>\r\n\t\t\t\t\t{posts &&\r\n\t\t\t\t\t\tposts.map((item, index) => (\r\n\t\t\t\t\t\t\t<Post\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\t// username={item.user.username}\r\n\t\t\t\t\t\t\t\ttitle={item.title}\r\n\t\t\t\t\t\t\t\tbody={item.body}\r\n\t\t\t\t\t\t\t\tonClick={onClickPost}\r\n\t\t\t\t\t\t\t\tuser={item.user}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</ol>\r\n\t\t\t</Container>\r\n\t\t</>\r\n\t);\r\n});\r\n\r\nconst Container = styled.div`\r\n\tjustify-content: center;\r\n\tbackground-color: #bababa;\r\n\tfont-size: 45px;\r\n\ttext-align: center;\r\n\tjustify-content: center;\r\n\tdisplay: grid;\r\n\tgrid-template-rows: 1fr 1fr 1fr;\r\n\tgrid-template-columns: 1fr 1fr 1fr;\r\n\tgrid-gap: 2vw;\r\n\tpadding: 0.5em;\r\n\tcolor: rgb(26, 23, 26);\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}